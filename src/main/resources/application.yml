server:
  port: ${PORT_TO_EXPOSE:8081}

spring:
  flyway:
    enabled: true
#    thymeleaf:
##      prefix:
#        classpath:  /templates/
#        suffix:   html
 # main:
 #   web-application-type:
  application:
    name: bozhko_project
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  jackson:
    date-format: com.fasterxml.jackson.databind.util.ISO8601DateFormat
  hibernate:
    ddl-auto: none
  datasource:
    driver-class-name: org.postgresql.Driver
    #url: jdbc:postgresql://localhost:5432/test?currentSchema=public
    url: jdbc:postgresql://localhost/test
    username: user
    password: 12345

components:
  securitySchemes:
    ApiKeyAuth:        # arbitrary name for the security scheme
      type: apiKey
      in: query       # can be "header", "query" or "cookie"
      name: X-API-KEY  # name of the header, query parameter or cookie
# 2) Apply the API key globally to all operations
security:
   ApiKeyAuth: []

paths:
  /users:
    get:
      summary: Returns a list of users.
      description: Optional extended description in CommonMark or HTML.
      responses:
        '200':    # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  #jpa.hibernate.ddl-auto: update
  jpa.database-platform: org.hibernate.dialect.PostgreSQLDialect
springfox:
  documentation:
    swagger:
      v2:
        path: /v3/api-docs



  #spring.jpa.properties.hibernate.format_sql=false
  #spring.jpa.generate-ddl=false
  #spring.jpa.hibernate.ddl-auto=none
  #spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
  
  # Fix Postgres JPA Error (Method org.postgresql.jdbc.PgConnection.createClob()).
  #spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true


